diff --git a/libloragw/Makefile b/libloragw/Makefile
index 262167a..45b7444 100644
--- a/libloragw/Makefile
+++ b/libloragw/Makefile
@@ -12,6 +12,7 @@ CC := $(CROSS_COMPILE)gcc
 AR := $(CROSS_COMPILE)ar
 
 CFLAGS := -O2 -Wall -Wextra -std=c99 -Iinc -I. -I../libtools/inc
+CFLAGS += -DNODEBUG
 
 OBJDIR = obj
 INCLUDES = $(wildcard inc/*.h) $(wildcard ../libtools/inc/*.h)
diff --git a/libloragw/inc/loragw_sx1302_timestamp.h b/libloragw/inc/loragw_sx1302_timestamp.h
index aa6635b..8e5c308 100644
--- a/libloragw/inc/loragw_sx1302_timestamp.h
+++ b/libloragw/inc/loragw_sx1302_timestamp.h
@@ -43,13 +43,12 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 @struct timestamp_counter_s
 @brief context to maintain the internal counters (inst and pps trig) rollover status
 */
-struct timestamp_info_s {
-    uint32_t counter_us_27bits_ref;     /* reference value (last read) */
-    uint8_t  counter_us_27bits_wrap;    /* rollover/wrap status */
-};
 typedef struct timestamp_counter_s {
-    struct timestamp_info_s inst; /* holds current reference of the instantaneous counter */
-    struct timestamp_info_s pps;  /* holds current reference of the pps-trigged counter */
+    struct timestamp_info_s {
+        uint32_t counter_subus;
+        int32_t  epochs_subus;
+        int64_t  clmono_ref;
+    } inst, pps;
 } timestamp_counter_t;
 
 /* -------------------------------------------------------------------------- */
@@ -73,27 +72,19 @@ void timestamp_counter_delete(timestamp_counter_t * self);
 @brief Update the counter wrapping status based on given current counter
 @param self     Pointer to the counter handler
 @param pps      Set to true to update the PPS trig counter status
-@param cnt      Current value of the counter to be used for the update
+@param cnt      Current value of the sub microsecond counter to be used for the update
 @return N/A
 */
 void timestamp_counter_update(timestamp_counter_t * self, bool pps, uint32_t cnt);
 
 /**
-@brief Convert the 27-bits counter given by the SX1302 to a 32-bits counter which wraps on a uint32_t.
-@param self     Pointer to the counter handler
-@param pps      Set to true to expand the counter based on the PPS trig wrapping status
-@param cnt_us   The 27-bits counter to be expanded
-@return the 32-bits counter
-*/
-uint32_t timestamp_counter_expand(timestamp_counter_t * self, bool pps, uint32_t cnt_us);
-
-/**
-@brief Convert the 27-bits packet timestamp to a 32-bits counter which wraps on a uint32_t.
-@param self     Pointer to the counter handler
-@param cnt_us   The packet 27-bits counter to be expanded
-@return the 32-bits counter
+@brief Convert the 32-bits sub-microsecond counter given by the SX1302 to a 32-bits microsecond counter.
+@param self      Pointer to the counter state
+@param pps       Set to true to expand the counter based on the PPS trig wrapping status
+@param cnt_subus The 32-bits sub microsecond counter to be converted
+@return the 32-bits microsecond counter
 */
-uint32_t timestamp_pkt_expand(timestamp_counter_t * self, uint32_t cnt_us);
+uint32_t timestamp_counter_expand(timestamp_counter_t * self, bool pps, uint32_t cnt_subus);
 
 /**
 @brief Reads the SX1302 internal counter register, and return the 32-bits 1 MHz counter
diff --git a/libloragw/src/loragw_debug.c b/libloragw/src/loragw_debug.c
index 2415d80..2151332 100644
--- a/libloragw/src/loragw_debug.c
+++ b/libloragw/src/loragw_debug.c
@@ -29,6 +29,15 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 
 #include "tinymt32.h"
 
+
+#if defined(NODEBUG)
+void dbg_init_random(void) {}
+void dbg_init_gpio(void) {}
+void dbg_log_buffer_to_file(FILE * file, uint8_t * buffer, uint16_t size) { (void) file; (void) buffer; (void) size; }
+void dbg_log_payload_diff_to_file(FILE * file, uint8_t * buffer1, uint8_t * buffer2, uint16_t size) { (void) file; (void) buffer1; (void) buffer2; (void) size; }
+int dbg_check_payload(struct lgw_conf_debug_s * context, FILE * file, uint8_t * payload_received, uint8_t size, uint8_t ref_payload_idx, uint8_t sf) {(void) context; (void) file; (void) payload_received; (void) size; (void) ref_payload_idx; (void) sf; return 0;}
+#else
+
 /* -------------------------------------------------------------------------- */
 /* --- DEBUG CONSTANTS ------------------------------------------------------ */
 
@@ -199,3 +208,4 @@ int dbg_check_payload(struct lgw_conf_debug_s * context, FILE * file, uint8_t *
 
     return 0; /* ignored */
 }
+#endif
diff --git a/libloragw/src/loragw_sx1302.c b/libloragw/src/loragw_sx1302.c
index 251fb36..6e1ce4d 100644
--- a/libloragw/src/loragw_sx1302.c
+++ b/libloragw/src/loragw_sx1302.c
@@ -1812,17 +1812,24 @@ int sx1302_parse(lgw_context_t * context, struct lgw_pkt_rx_s * p) {
         timestamp_correction = 0;
     }
 
-    /* Update counter reference / wrap status before expanding */
-    timestamp_counter_get(&counter_us, false);
+    /* Convert sub-us value into micros and do correction */
+    p->count_us = timestamp_counter_expand(&counter_us, false, pkt.timestamp_cnt) - timestamp_correction;
 
-    /* Scale 32 MHz packet timestamp to 1 MHz (microseconds) */
-    p->count_us = pkt.timestamp_cnt / 32;
-
-    /* Expand 27-bits counter to 32-bits counter, based on current wrapping status */
-    p->count_us = timestamp_pkt_expand(&counter_us, p->count_us);
-
-    /* Packet timestamp corrected */
-    p->count_us = p->count_us - timestamp_correction;
+#if 0 // debug code to check for failed submicros/micros handling
+    {
+        static uint32_t last_valid = 0;
+        static uint32_t last_us32 = 0;
+        int32_t diff = p->count_us - last_us32;
+        printf("XXXXXXXXXXXXXXXX pkt=%08X last=%08X diff=%08X/%d  seqno=%04X\n",
+               p->count_us, last_us32, diff, diff, (p->payload[1]<<8)|p->payload[2]);
+        if( last_valid && diff > 30000000 ) {
+            printf("XXXXXXXXXXXXXXXX ERROR jump ahead count_us\n");
+            exit(1);
+        }
+        last_us32 = p->count_us;
+        last_valid = 1;
+    }
+#endif
 
     /* Packet CRC status */
     p->crc = pkt.rx_crc16_value;
diff --git a/libloragw/src/loragw_sx1302_timestamp.c b/libloragw/src/loragw_sx1302_timestamp.c
index 77c3d4d..487283f 100644
--- a/libloragw/src/loragw_sx1302_timestamp.c
+++ b/libloragw/src/loragw_sx1302_timestamp.c
@@ -21,9 +21,11 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 /* -------------------------------------------------------------------------- */
 /* --- DEPENDANCIES --------------------------------------------------------- */
 
+#define _POSIX_C_SOURCE 199309L
 #include <stdint.h>     /* C99 types */
 #include <stdio.h>      /* printf fprintf */
 #include <memory.h>     /* memset */
+#include <time.h>       /* clock monotonic */
 
 #include "loragw_sx1302_timestamp.h"
 #include "loragw_reg.h"
@@ -62,6 +64,16 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 /* -------------------------------------------------------------------------- */
 /* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
 
+static int64_t clock_monotonic() {
+    struct timespec ts;
+    if( clock_gettime(CLOCK_MONOTONIC, &ts) != 0 ) {
+        printf("ERROR: clock_gettime(CLOCK_MONOTONIC, ..) failed!\n");
+        return 0;
+    }
+    /* Return subus resolution - rounded, +1 makes sure 0 is never returned */
+    return ((ts.tv_sec+1)*1000000000LL + ts.tv_nsec + 16) / 32;
+}
+
 /* -------------------------------------------------------------------------- */
 /* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
 
@@ -77,17 +89,36 @@ void timestamp_counter_delete(timestamp_counter_t * self) {
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
-void timestamp_counter_update(timestamp_counter_t * self, bool pps, uint32_t cnt) {
-    struct timestamp_info_s* tinfo = (pps == true) ? &self->pps : &self->inst;
-
-    /* Check if counter has wrapped, and update wrap status if necessary */
-    if (cnt < tinfo->counter_us_27bits_ref) {
-        tinfo->counter_us_27bits_wrap += 1;
-        tinfo->counter_us_27bits_wrap %= 32;
+void timestamp_counter_update(timestamp_counter_t * self, bool pps, uint32_t cnt_subus) {
+    struct timestamp_info_s* tinfo = pps ? &self->pps : &self->inst;
+    int64_t now = clock_monotonic();
+    if( tinfo->clmono_ref == 0 ) {
+        tinfo->clmono_ref = now;
+        tinfo->counter_subus = cnt_subus;
+        return;
     }
-
-    /* Update counter reference */
-    tinfo->counter_us_27bits_ref = cnt;
+    /*
+     * Let m1,m2 be previous/current clock monotonic (64bit)
+     * and u1,u2 corresponding 32bit submicrosecond recordings from SX1302
+     * There are the following errors to consider:
+     *   e1 = (int32_t)(m1-u1)
+     *   e2 = (int32_t)(m2-u2)
+     * e1,e2 are related to local CPU processing jitter since the time between clock_monotonic() and
+     * the retrieval of the submicrosecond counter varies due to processing overhead.
+     *   e3 = (int2_t)((uint32_t)(u2-u1) - (uint32_t)(m2-m2))
+     * e3 is the CPU clock drift against the submicrosecond counter.
+     * E=e1+e2+e3 is significantly smaller than 2^31 submicroseconds (<<<~67s)
+     * The assumption is that the submicrosecond counter may have rolled over possibly multiple times
+     * betwen calls to timestamp_counter_update().
+     * Thus:
+     *   m2-m1 = k*2^32 + (uint32_t)(u2-u1) + E
+     * and the number of rollovers is calculated as:
+     *   k*2^32 = (m2-m1) - (uint32_t)(u2-u1) - E   and  -2^31 <<< E <<< 2^31
+     */
+    int64_t diff = now - tinfo->clmono_ref - (uint32_t)(cnt_subus - tinfo->counter_subus);
+    tinfo->epochs_subus += ((diff + (1U<<31)) >> 32) + (cnt_subus < tinfo->counter_subus ? 1:0);
+    tinfo->counter_subus = cnt_subus;
+    tinfo->clmono_ref = now;
 }
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
@@ -95,7 +126,7 @@ void timestamp_counter_update(timestamp_counter_t * self, bool pps, uint32_t cnt
 uint32_t timestamp_counter_get(timestamp_counter_t * self, bool pps) {
     int x;
     uint8_t buff[4];
-    uint32_t counter_us_raw_27bits_now;
+    uint32_t counter_subus;
     int32_t msb;
 
     /* Get the 32MHz timestamp counter - 4 bytes */
@@ -128,25 +159,22 @@ uint32_t timestamp_counter_get(timestamp_counter_t * self, bool pps) {
         }
     }
 
-    counter_us_raw_27bits_now = (buff[0]<<24) | (buff[1]<<16) | (buff[2]<<8) | buff[3];
-
-    /* Scale to 1MHz */
-    counter_us_raw_27bits_now /= 32;
+    counter_subus = (buff[0]<<24) | (buff[1]<<16) | (buff[2]<<8) | buff[3];
 
     /* Update counter wrapping status */
-    timestamp_counter_update(self, pps, counter_us_raw_27bits_now);
+    timestamp_counter_update(self, pps, counter_subus);
 
-    /* Convert 27-bits counter to 32-bits counter */
-    return timestamp_counter_expand(self, pps, counter_us_raw_27bits_now);
+    /* Convert 1/32 microsecond to microsecond counter  */
+    return timestamp_counter_expand(self, pps, counter_subus);
 }
 
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
-uint32_t timestamp_counter_expand(timestamp_counter_t * self, bool pps, uint32_t cnt_us) {
+uint32_t timestamp_counter_expand(timestamp_counter_t * self, bool pps, uint32_t cnt_subus) {
     struct timestamp_info_s* tinfo = (pps == true) ? &self->pps : &self->inst;
-    uint32_t counter_us_32bits;
-
-    counter_us_32bits = (tinfo->counter_us_27bits_wrap << 27) | cnt_us;
+    /* Convert submicroseconds (1/32us = 31.25ns) into microseconds */
+    int32_t delta_subus = (int32_t)(cnt_subus - tinfo->counter_subus); /* this *must* be a 32bit signed value */
+    uint32_t counter_us_32bits = (((int64_t)tinfo->epochs_subus << 32) + tinfo->counter_subus + delta_subus) >> 5;
 
 #if 0
     /* DEBUG: to be enabled when running test_loragw_counter test application
@@ -154,41 +182,13 @@ uint32_t timestamp_counter_expand(timestamp_counter_t * self, bool pps, uint32_t
         > set datafile separator comma
         > plot for [col=1:2:1] 'log_count.txt' using col with lines
     */
-    printf("%u,%u,%u\n", cnt_us, counter_us_32bits, tinfo->counter_us_27bits_wrap);
+    printf("%u,%u,%llu\n", cnt_subus, counter_us_32bits, tinfo->counter_subus);
 #endif
 
     return counter_us_32bits;
 }
 
 
-/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
-
-uint32_t timestamp_pkt_expand(timestamp_counter_t * self, uint32_t pkt_cnt_us) {
-    struct timestamp_info_s* tinfo = &self->inst;
-    uint32_t counter_us_32bits;
-    uint8_t wrap_status;
-
-    /* Check if counter has wrapped since the packet has been received in the sx1302 internal FIFO */
-    /* If the sx1302 counter was greater than the pkt timestamp, it means that the internal counter
-        hasn't rolled over since the packet has been received by the sx1302
-        case 1: --|-P--|----|--R-|----|--||-|----|-- : use current wrap status counter
-        case 2: --|-P-||-|-R--|-- : use previous wrap status counter
-        P : packet received in sx1302 internal FIFO
-        R : read packet from sx1302 internal FIFO
-        | : last update internal counter ref value.
-        ||: sx1302 internal counter rollover (wrap)
-    */
-
-    /* Use current wrap counter or previous ? */
-    wrap_status = tinfo->counter_us_27bits_wrap - ((tinfo->counter_us_27bits_ref >= pkt_cnt_us) ? 0 : 1);
-    wrap_status &= 0x1F; /* [0..31] */
-
-    /* Expand packet counter */
-    counter_us_32bits = (wrap_status << 27) | pkt_cnt_us;
-
-    return counter_us_32bits;
-}
-
 /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
 
 int timestamp_counter_mode(bool enable_precision_ts, uint8_t max_ts_metrics, uint8_t nb_symbols) {
diff --git a/libloragw/Makefile b/libloragw/Makefile
index 262167a..439b23a 100644
--- a/libloragw/Makefile
+++ b/libloragw/Makefile
@@ -85,7 +85,7 @@ $(OBJDIR)/%.o: src/%.c $(INCLUDES) inc/config.h | $(OBJDIR)
 
 ### static library
 
-libloragw.a: $(OBJDIR)/loragw_spi.o $(OBJDIR)/loragw_i2c.o $(OBJDIR)/loragw_aux.o $(OBJDIR)/loragw_reg.o $(OBJDIR)/loragw_sx1250.o $(OBJDIR)/loragw_sx125x.o $(OBJDIR)/loragw_sx1302.o $(OBJDIR)/loragw_cal.o $(OBJDIR)/loragw_debug.o $(OBJDIR)/loragw_hal.o $(OBJDIR)/loragw_stts751.o $(OBJDIR)/loragw_gps.o $(OBJDIR)/loragw_sx1302_timestamp.o $(OBJDIR)/loragw_sx1302_rx.o
+libloragw.a: $(OBJDIR)/loragw_spi.o $(OBJDIR)/loragw_i2c.o $(OBJDIR)/loragw_aux.o $(OBJDIR)/loragw_reg.o $(OBJDIR)/loragw_sx1250.o $(OBJDIR)/loragw_sx125x.o $(OBJDIR)/loragw_sx1302.o $(OBJDIR)/loragw_cal.o $(OBJDIR)/loragw_debug.o $(OBJDIR)/loragw_hal.o $(OBJDIR)/loragw_gps.o $(OBJDIR)/loragw_sx1302_timestamp.o $(OBJDIR)/loragw_sx1302_rx.o
 	$(AR) rcs $@ $^
 
 ### test programs
diff --git a/libloragw/inc/loragw_stts751.h b/libloragw/inc/loragw_stts751.h
deleted file mode 100644
index b1a898a..0000000
--- a/libloragw/inc/loragw_stts751.h
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- / _____)             _              | |
-( (____  _____ ____ _| |_ _____  ____| |__
- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
- _____) ) ____| | | || |_| ____( (___| | | |
-(______/|_____)_|_|_| \__)_____)\____)_| |_|
-  (C)2019 Semtech
-
-Description:
-    Basic driver for ST ts751 temperature sensor
-
-License: Revised BSD License, see LICENSE.TXT file include in the project
-*/
-
-
-#ifndef _LORAGW_STTS751_H
-#define _LORAGW_STTS751_H
-
-/* -------------------------------------------------------------------------- */
-/* --- DEPENDANCIES --------------------------------------------------------- */
-
-#include <stdint.h>     /* C99 types */
-#include <stdbool.h>    /* bool type */
-
-#include "config.h"     /* library configuration options (dynamically generated) */
-
-/* -------------------------------------------------------------------------- */
-/* --- INTERNAL SHARED TYPES ------------------------------------------------ */
-
-/* -------------------------------------------------------------------------- */
-/* --- INTERNAL SHARED FUNCTIONS -------------------------------------------- */
-
-/* -------------------------------------------------------------------------- */
-/* --- PUBLIC CONSTANTS ----------------------------------------------------- */
-
-#define I2C_PORT_TEMP_SENSOR_0    0x39  /* STTS751-0DP3F */
-#define I2C_PORT_TEMP_SENSOR_1    0x3B  /* STTS751-1DP3F */
-
-/* -------------------------------------------------------------------------- */
-/* --- PUBLIC FUNCTIONS ----------------------------------------------------- */
-
-/**
-@brief TODO
-@param TODO
-@return TODO
-*/
-int stts751_configure(int i2c_fd, uint8_t i2c_addr);
-
-/**
-@brief TODO
-@param TODO
-@return TODO
-*/
-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature);
-
-#endif
-
-/* --- EOF ------------------------------------------------------------------ */
diff --git a/libloragw/src/loragw_hal.c b/libloragw/src/loragw_hal.c
index 3b00c09..66d5c97 100644
--- a/libloragw/src/loragw_hal.c
+++ b/libloragw/src/loragw_hal.c
@@ -41,7 +41,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
 #include "loragw_sx1250.h"
 #include "loragw_sx125x.h"
 #include "loragw_sx1302.h"
-#include "loragw_stts751.h"
+
 #include "loragw_debug.h"
 
 /* -------------------------------------------------------------------------- */
@@ -181,8 +181,8 @@ static lgw_context_t lgw_context = {
 FILE * log_file = NULL;
 
 /* I2C temperature sensor handles */
-static int     ts_fd = -1;
-static uint8_t ts_addr = 0xFF;
+//static int     ts_fd = -1;
+//static uint8_t ts_addr = 0xFF;
 
 /* -------------------------------------------------------------------------- */
 /* --- PRIVATE FUNCTIONS DECLARATION ---------------------------------------- */
@@ -719,22 +719,23 @@ int lgw_start(void) {
     dbg_init_gpio();
 #endif
 
+//
     /* Try to configure temperature sensor STTS751-0DP3F */
-    ts_addr = I2C_PORT_TEMP_SENSOR_0;
-    i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
-    err = stts751_configure(ts_fd, ts_addr);
-    if (err != LGW_I2C_SUCCESS) {
-        i2c_linuxdev_close(ts_fd);
-        ts_fd = -1;
-        /* Not found, try to configure temperature sensor STTS751-1DP3F */
-        ts_addr = I2C_PORT_TEMP_SENSOR_1;
-        i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
-        err = stts751_configure(ts_fd, ts_addr);
-        if (err != LGW_I2C_SUCCESS) {
-            printf("ERROR: failed to configure the temperature sensor\n");
-            return LGW_HAL_ERROR;
-        }
-    }
+//    ts_addr = I2C_PORT_TEMP_SENSOR_0;
+//    i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
+//    err = stts751_configure(ts_fd, ts_addr);
+//    if (err != LGW_I2C_SUCCESS) {
+//        i2c_linuxdev_close(ts_fd);
+//        ts_fd = -1;
+//        /* Not found, try to configure temperature sensor STTS751-1DP3F */
+//        ts_addr = I2C_PORT_TEMP_SENSOR_1;
+//        i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
+//        err = stts751_configure(ts_fd, ts_addr);
+//        if (err != LGW_I2C_SUCCESS) {
+//            printf("ERROR: failed to configure the temperature sensor\n");
+//            return LGW_HAL_ERROR;
+//        }
+//    }
 
     /* set hal state */
     CONTEXT_STARTED = true;
@@ -762,10 +763,10 @@ int lgw_stop(void) {
     lgw_disconnect();
 
     DEBUG_MSG("INFO: Closing I2C\n");
-    err = i2c_linuxdev_close(ts_fd);
-    if (err != 0) {
-        printf("ERROR: failed to close I2C device (err=%i)\n", err);
-    }
+    //err = i2c_linuxdev_close(ts_fd);
+    //if (err != 0) {
+    //    printf("ERROR: failed to close I2C device (err=%i)\n", err);
+    //}
 
     CONTEXT_STARTED = false;
     return LGW_HAL_SUCCESS;
@@ -778,7 +779,9 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
     uint8_t  nb_pkt_fetched = 0;
     uint16_t nb_pkt_found = 0;
     uint16_t nb_pkt_left = 0;
-    float current_temperature, rssi_temperature_offset;
+    //float current_temperature, rssi_temperature_offset;
+	float current_temperature = 30.0;
+    float rssi_temperature_offset;
 
     /* Check that AGC/ARB firmwares are not corrupted, and update internal counter */
     /* WARNING: this needs to be called regularly by the upper layer */
@@ -802,11 +805,11 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
     }
 
     /* Apply RSSI temperature compensation */
-    res = stts751_get_temperature(ts_fd, ts_addr, &current_temperature);
-    if (res != LGW_I2C_SUCCESS) {
-        printf("ERROR: failed to get current temperature\n");
-        return LGW_HAL_ERROR;
-    }
+    //res = stts751_get_temperature(ts_fd, ts_addr, &current_temperature);
+    //if (res != LGW_I2C_SUCCESS) {
+    //    printf("ERROR: failed to get current temperature\n");
+    //    return LGW_HAL_ERROR;
+    //}
 
     /* Iterate on the RX buffer to get parsed packets */
     for (nb_pkt_found = 0; nb_pkt_found < ((nb_pkt_fetched <= max_pkt) ? nb_pkt_fetched : max_pkt); nb_pkt_found++) {
@@ -982,10 +985,10 @@ int lgw_get_eui(uint64_t* eui) {
 
 int lgw_get_temperature(float* temperature) {
     CHECK_NULL(temperature);
-
-    if (stts751_get_temperature(ts_fd, ts_addr, temperature) != LGW_I2C_SUCCESS) {
-        return LGW_HAL_ERROR;
-    }
+    *temperature = 30.0;
+    //if (stts751_get_temperature(ts_fd, ts_addr, temperature) != LGW_I2C_SUCCESS) {
+    //    return LGW_HAL_ERROR;
+    //}
 
     return LGW_HAL_SUCCESS;
 }
diff --git a/libloragw/src/loragw_stts751.c b/libloragw/src/loragw_stts751.c
deleted file mode 100644
index c417dc2..0000000
--- a/libloragw/src/loragw_stts751.c
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- / _____)             _              | |
-( (____  _____ ____ _| |_ _____  ____| |__
- \____ \| ___ |    (_   _) ___ |/ ___)  _ \
- _____) ) ____| | | || |_| ____( (___| | | |
-(______/|_____)_|_|_| \__)_____)\____)_| |_|
-  (C)2019 Semtech
-
-Description:
-    Basic driver for ST ts751 temperature sensor
-
-License: Revised BSD License, see LICENSE.TXT file include in the project
-*/
-
-
-/* -------------------------------------------------------------------------- */
-/* --- DEPENDANCIES --------------------------------------------------------- */
-
-#include <stdint.h>     /* C99 types */
-#include <stdbool.h>    /* bool type */
-#include <stdio.h>      /* printf fprintf */
-
-#include "loragw_i2c.h"
-#include "loragw_stts751.h"
-
-/* -------------------------------------------------------------------------- */
-/* --- PRIVATE MACROS ------------------------------------------------------- */
-
-#define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))
-#if DEBUG_I2C == 1
-    #define DEBUG_MSG(str)              fprintf(stderr, str)
-    #define DEBUG_PRINTF(fmt, args...)  fprintf(stderr,"%s:%d: "fmt, __FUNCTION__, __LINE__, args)
-    #define CHECK_NULL(a)               if(a==NULL){fprintf(stderr,"%s:%d: ERROR: NULL POINTER AS ARGUMENT\n", __FUNCTION__, __LINE__);return LGW_REG_ERROR;}
-#else
-    #define DEBUG_MSG(str)
-    #define DEBUG_PRINTF(fmt, args...)
-    #define CHECK_NULL(a)               if(a==NULL){return LGW_REG_ERROR;}
-#endif
-
-/* -------------------------------------------------------------------------- */
-/* --- PRIVATE CONSTANTS ---------------------------------------------------- */
-
-#define STTS751_REG_TEMP_H      0x00
-#define STTS751_REG_STATUS      0x01
-#define STTS751_STATUS_TRIPT    BIT(0)
-#define STTS751_STATUS_TRIPL    BIT(5)
-#define STTS751_STATUS_TRIPH    BIT(6)
-#define STTS751_REG_TEMP_L      0x02
-#define STTS751_REG_CONF        0x03
-#define STTS751_CONF_RES_MASK   0x0C
-#define STTS751_CONF_RES_SHIFT  2
-#define STTS751_CONF_EVENT_DIS  BIT(7)
-#define STTS751_CONF_STOP       BIT(6)
-#define STTS751_REG_RATE        0x04
-#define STTS751_REG_HLIM_H      0x05
-#define STTS751_REG_HLIM_L      0x06
-#define STTS751_REG_LLIM_H      0x07
-#define STTS751_REG_LLIM_L      0x08
-#define STTS751_REG_TLIM        0x20
-#define STTS751_REG_HYST        0x21
-#define STTS751_REG_SMBUS_TO    0x22
-
-#define STTS751_REG_PROD_ID     0xFD
-#define STTS751_REG_MAN_ID      0xFE
-#define STTS751_REG_REV_ID      0xFF
-
-#define STTS751_0_PROD_ID       0x00
-#define STTS751_1_PROD_ID       0x01
-#define ST_MAN_ID               0x53
-
-/* -------------------------------------------------------------------------- */
-/* --- PRIVATE VARIABLES ---------------------------------------------------- */
-
-/* -------------------------------------------------------------------------- */
-/* --- INTERNAL SHARED VARIABLES -------------------------------------------- */
-
-/* -------------------------------------------------------------------------- */
-/* --- PRIVATE FUNCTIONS ---------------------------------------------------- */
-
-/* -------------------------------------------------------------------------- */
-/* --- PUBLIC FUNCTIONS DEFINITION ------------------------------------------ */
-
-int stts751_configure(int i2c_fd, uint8_t i2c_addr) {
-    int err;
-    uint8_t val;
-
-    /* Check Input Params */
-    if (i2c_fd <= 0) {
-        printf("ERROR: invalid I2C file descriptor\n");
-        return LGW_I2C_ERROR;
-    }
-
-    DEBUG_PRINTF("INFO: configuring STTS751 temperature sensor on 0x%02X...\n", i2c_addr);
-
-    /* Get product ID  and test which sensor is mounted */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_PROD_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    switch (val) {
-        case STTS751_0_PROD_ID:
-            DEBUG_MSG("INFO: Product ID: STTS751-0\n");
-            break;
-        case STTS751_1_PROD_ID:
-            DEBUG_MSG("INFO: Product ID: STTS751-1\n");
-            break;
-        default:
-            printf("ERROR: Product ID: UNKNOWN\n");
-            return LGW_I2C_ERROR;
-    }
-
-    /* Get Manufacturer ID */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_MAN_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    if (val != ST_MAN_ID) {
-        printf("ERROR: Manufacturer ID: UNKNOWN\n");
-        return LGW_I2C_ERROR;
-    } else {
-        DEBUG_PRINTF("INFO: Manufacturer ID: 0x%02X\n", val);
-    }
-
-    /* Get revision number */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_REV_ID, &val);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-    DEBUG_PRINTF("INFO: Revision number: 0x%02X\n", val);
-
-    /* Set conversion resolution to 12 bits */
-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_CONF, 0x8C); /* TODO: do not hardcode the whole byte */
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    /* Set conversion rate to 1 / second */
-    err = i2c_linuxdev_write(i2c_fd, i2c_addr, STTS751_REG_RATE, 0x04);
-    if (err != 0) {
-        DEBUG_PRINTF("ERROR: failed to write I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    return LGW_I2C_SUCCESS;
-}
-
-/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
-
-int stts751_get_temperature(int i2c_fd, uint8_t i2c_addr, float * temperature) {
-    int err;
-    uint8_t high_byte, low_byte;
-    int8_t h;
-
-    /* Check Input Params */
-    if (i2c_fd <= 0) {
-        printf("ERROR: invalid I2C file descriptor\n");
-        return LGW_I2C_ERROR;
-    }
-
-    /* Read Temperature LSB */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_L, &low_byte);
-    if (err != 0) {
-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    /* Read Temperature MSB */
-    err = i2c_linuxdev_read(i2c_fd, i2c_addr, STTS751_REG_TEMP_H, &high_byte);
-    if (err != 0) {
-        printf("ERROR: failed to read I2C device 0x%02X (err=%i)\n", i2c_addr, err);
-        return LGW_I2C_ERROR;
-    }
-
-    h = (int8_t)high_byte;
-    *temperature = ((h << 8) | low_byte) / 256.0;
-
-    DEBUG_PRINTF("Temperature: %f C (h:0x%02X l:0x%02X)\n", *temperature, high_byte, low_byte);
-
-    return LGW_I2C_SUCCESS;
-}
-
-/* --- EOF ------------------------------------------------------------------ */
